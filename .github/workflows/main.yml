name: CI/CD Pipeline

on:
  push:
    branches:
      - main  

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Build and Deploy to Dev EC2
        uses: appleboy/ssh-action@master
        with:
          host: 3.108.61.107
          username: ubuntu  # Change if needed
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: 22
          script: |
            # Navigate to the app directory or clone the repository if it doesn't exist
            if [ ! -d "/home/ubuntu/my-python-app" ]; then
              git clone https://github.com/Sowparnika-Poojary/Python_Web_App.git /home/ubuntu/my-python-app
            fi
            
            cd /home/ubuntu/my-python-app
            
            # Pull latest changes
            git pull

            # Remove old images with the same name and no tags
            docker images --filter "reference=${{ secrets.DOCKER_HUB_USERNAME }}/my-python-app" --filter "dangling=true" -q | xargs -r docker rmi
            
            # Build Docker image
            docker build -t ${{ secrets.DOCKER_HUB_USERNAME }}/my-python-app:latest .

            # Log in to Docker Hub
            echo ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }} | docker login -u ${{ secrets.DOCKER_HUB_USERNAME }} --password-stdin
            
            # Push the Docker image to Docker Hub
            docker push ${{ secrets.DOCKER_HUB_USERNAME }}/my-python-app:latest

            # Check if the container exists and remove it if it does
            if [ $(docker ps -a -q -f name=my-python-app-container) ]; then
              docker stop my-python-app-container
              docker rm my-python-app-container
            fi

            # Run the Docker container
            docker run -d -p 80:5000 --name my-python-app-container ${{ secrets.DOCKER_HUB_USERNAME }}/my-python-app:latest

      - name: Deploy to PROD EC2
        uses: appleboy/ssh-action@master
        with:
          host: 13.127.130.113
          username: ubuntu  # Change if needed
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: 22
          script: |
            # Check if Docker is installed
            if ! command -v docker &> /dev/null; then
              echo "Docker not found, installing..."
            # Install Docker directly using apt
              sudo apt-get update
              sudo apt-get install -y docker.io
            else
              echo "Docker is already installed."
            fi

            # Pull the latest Docker image on QA server
            docker pull ${{ secrets.DOCKER_HUB_USERNAME }}/my-python-app:latest

            # Check if the container exists and remove it if it does
            if [ $(docker ps -a -q -f name=my-python-app-container-prod) ]; then
              docker stop my-python-app-container-prod
              docker rm my-python-app-container-prod
            fi

            # Run the Docker container on QA server
            docker run -d -p 80:5000 --name my-python-app-container-prod ${{ secrets.DOCKER_HUB_USERNAME }}/my-python-app:latest
